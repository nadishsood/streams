How to not navigate with react router.

Don't use anchor tags to route between components. Because web browser dumps old html/js/data and
reloads. See the network monitor in chrome. 

link tag prevents the page from getting reloaded when navigating in our application. 
SPA - clicking on links and moving around but using the same index.html, not getting it again and again. 

Always visible components: 
    just add that component outside the browser router. It'll always be shown 
    regardless of the route we are on. 

    we later move header inside the browserrouter but withut a path so it will still be always visible. 
    We do this because otherwise <link> can not be used outside of router.

Section 17: OAuth Authentication

clientId: 
462063278023-ohi1u73j0v3sigkie80qu70l0tj4345v.apps.googleusercontent.com

//gapi.load is used to fetch in the additional js code and load it into the library. 
//gapi now gets more functions available on it. 
//init is also an asynchronous function
//load - have to use a callback object, init - returns a promise, therefore can use then

//window.gapi.auth2.getAuthInstance() returns an authentication object. 
//isSignedIn in the state is null - we dont know whether or not a user is signed in. 

//google auth holds authentication between refreshes. 
//earlier we had to refresh page to change the signed in not signed in text, 
but that should happen automatically. 
 this.auth.isSignedIn.listen(this.onAuthChange); will change the text automaticallty. 


//all our authentication rn is in the google auth component - see commit, 
We may now want to move it to redux after intergrating redux. 

Redux architecture design 220. 

we will now take our local store and take it to the redux store (central). This also helps
us to keep the sign in and sign out data into some central location for other components to 
access rather than just keep it with the googleAuth component. It is a lot of work, 
but worth the tradeoff. We keep the isloggedIn state in the store and pass it back into the
component. 

We're taking the above approach because Stephen wanted to keep the authentication logic inside the 
component so that we can easily figure it out later.

With the other approach which sticks more closely to redux:
 We want only our action creators to be the one to initiate change in state of an application. 
 gApi auth will be accesible throught the action creators, not the component. 


//all the data in our redux store falls away when we refresh, but using a debug session, 
the redux dev tool persists data even across refreshes. 


//we take our streamlist from our state, and turn it into an array before it goes into our component 
to render it
//we associate our user id in the createstream action. 


intentional vs programmatic navigation
    prog: run code to navigate user somewhere else after some event. 
            history object created by the browserRouter keeps track of the address bar and 
            can also change the address in the add bar. We have access to the history object
            inside the component but not in the action creator. (see video 262). We could pass
            it into our action creator from the comp? No, use an alternative solution - 
            Solution: Browser Router creates the history object, let us ourselves create the history
            object, import that file and use it instead of letting react router do it. 

            If we create a new history object, we do not use the browser router 
            as the top level comp. If we make the history obj, we use a simple router, 
            not a browser router anymore. 


url based routing: 
    passing id into url in edit, delete and show paths. 


component isolation with react router: 


275. 
StreamEdit passes props to ReduxForm and not to StreamForm, since StreamForm
is wrapped by ReduxForm. So we can pass initialValues prop with names of titles
and description from streamEdit into 
the Redux Form. 

276. 
Problem with console.log check the video: 
formValues should only contain the changes that should be made to our backend, so userid 
and id should not be there. In general, the backend server might expect only the values to be changed
in the change set being sent. 

the user id and all are being shown because we earlier passed the entire stream object into the form 
we use lodash to only pass values that we expect to change. 
 

277: 
when we edited a stream edit and delete buttons disappeared. 


